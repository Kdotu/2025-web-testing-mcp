import React, { useState, useEffect } from 'react';
import { Button } from '../ui/button';
import { Label } from '../ui/label';
import { AlertCircle, Play, CheckCircle, XCircle, Clock, FileText, Code, BookOpen, Zap, Monitor, Bug } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';

export function PlaywrightTestExecution() {
  const [scenarioCode, setScenarioCode] = useState('');
  const [naturalScenario, setNaturalScenario] = useState('');
  const [config, setConfig] = useState({
    browser: 'chromium',
    headless: true,
    viewport: { width: 1280, height: 720 },
    timeout: 30000
  });
  const [executionId, setExecutionId] = useState<string | null>(null);
  const [executionStatus, setExecutionStatus] = useState<'idle' | 'pending' | 'running' | 'completed' | 'failed'>('idle');
  const [progressPercentage, setProgressPercentage] = useState(0);
  const [currentStep, setCurrentStep] = useState('');
  const [logs, setLogs] = useState<string[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // ÏûêÏó∞Ïñ¥ ÏãúÎÇòÎ¶¨Ïò§ Í∏∞Î≥∏ ÏòàÏãúÎßå ÏÑ§Ï†ï (ÏΩîÎìúÎäî ÏûêÎèô ÏÉùÏÑ±ÎêòÎèÑÎ°ù)
    setNaturalScenario(``);
  }, []);

  // ÏûêÏó∞Ïñ¥ ÏãúÎÇòÎ¶¨Ïò§Í∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ ÏûêÎèôÏúºÎ°ú ÏΩîÎìú Î≥ÄÌôò
  useEffect(() => {
    if (naturalScenario.trim()) {
      const generated = generateCodeFromNaturalLanguage(naturalScenario);
      setScenarioCode(generated);
    } else {
      // ÏûêÏó∞Ïñ¥ ÏãúÎÇòÎ¶¨Ïò§Í∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ ÏΩîÎìúÎèÑ ÎπÑÏõÄ (placeholderÍ∞Ä Î≥¥Ïù¥ÎèÑÎ°ù)
      setScenarioCode('');
    }
  }, [naturalScenario]);

  const generateCodeFromNaturalLanguage = (nl: string): string => {
    const lines = nl.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
    const steps = lines.filter(l => /\d+\)/.test(l) || /^-\s+/.test(l) || /\b(Ï†ëÏÜç|ÌÅ¥Î¶≠|ÏûÖÎ†•|ÌôïÏù∏|Í∏∞Îã§Î¶º|Ïä§ÌÅ¨Î¶∞ÏÉ∑|ÌÉÄÏù¥ÌãÄ|Ï†úÎ™©|URL|Î∑∞Ìè¨Ìä∏)\b/.test(l));

    const body: string[] = [];

    const add = (code: string) => body.push(code);

    const selectorFrom = (text: string): string => {
      // Îß§Ïö∞ Îã®ÏàúÌïú Ìú¥Î¶¨Ïä§Ìã±: Îî∞Ïò¥Ìëú Ìè¨Ìï® ÌÖçÏä§Ìä∏ Ïö∞ÏÑ†, role/label ÌÇ§ÏõåÎìú Îß§Ìïë ÏãúÎèÑ
      const q = (text.match(/"([^"]+)"|'([^']+)'/) || [])[1] || text;
      if (/^#|\.|\[|\//.test(q)) return q; // selectorÎ°ú Î≥¥Ïù¥Î©¥ Í∑∏ÎåÄÎ°ú
      if (/\bh1|h2|h3|button|input|a\b/.test(q)) return q; // ÌÉúÍ∑∏Î™Ö
      return `text=${q}`; // ÌÖçÏä§Ìä∏ Îß§Ïπ≠
    };

    for (const raw of steps) {
      const l = raw.replace(/^\d+\)\s*/, '').replace(/^[-‚Ä¢]\s*/, '');
      // Ï†ëÏÜç/Ïù¥Îèô
      if (/(Ï†ëÏÜç|Î∞©Î¨∏|Ïù¥Îèô).*https?:\/\//.test(l)) {
        const url = l.match(/https?:\/\/[\w\-._~:\/?#\[\]@!$&'()*+,;=%]+/i)?.[0];
        if (url) add(`  await page.goto('${url}');`);
        continue;
      }
      if (/ÌÉÄÏù¥ÌãÄ|Ï†úÎ™©/.test(l) && /(Ìè¨Ìï®|Í∞ôÎã§|ÏùºÏπò)/.test(l)) {
        const m = l.match(/["‚Äú‚Äù'']([^"‚Äù']+)["‚Äù'']/);
        if (m) add(`  await expect(page).toHaveTitle(/${m[1].replace(/[\\/]/g, '')}/);`);
        continue;
      }
      if (/(Î≥¥Ïù¥ÎäîÏßÄ|Ï°¥Ïû¨|ÌëúÏãú).*(ÌôïÏù∏|Í≤ÄÏ¶ù)/.test(l) || /Î≥¥Ïù∏Îã§$/.test(l)) {
        const m = l.match(/["‚Äú‚Äù'']([^"‚Äù']+)["‚Äù'']/);
        if (m) {
          add(`  await expect(page.locator('${selectorFrom(m[1])}')).toBeVisible();`);
        } else if (/h1|h2|h3|button|input|a/.test(l)) {
          const tag = l.match(/h1|h2|h3|button|input|a/)?.[0] || 'h1';
          add(`  await expect(page.locator('${tag}')).toBeVisible();`);
        }
        continue;
      }
      if (/(ÌÅ¥Î¶≠|ÎàÑÎ•∏Îã§)/.test(l)) {
        const m = l.match(/["‚Äú‚Äù'']([^"‚Äù']+)["‚Äù'']/);
        if (m) add(`  await page.click('${selectorFrom(m[1])}');`);
        continue;
      }
      if (/(ÏûÖÎ†•|Ï±ÑÏö¥Îã§|ÌÉÄÏù¥Ìïë)/.test(l)) {
        // Ïòà: "#email" Ïóê "user@example.com" ÏùÑ ÏûÖÎ†•ÌïúÎã§
        const sel = l.match(/("[^"]+"|'[^']+')\s*Ïóê/)?.[1];
        const val = l.match(/Ïóê\s*("[^"]+"|'[^']+')\s*ÏùÑ?\s*(ÏûÖÎ†•|Ï±ÑÏö¥Îã§|ÌÉÄÏù¥Ìïë)/)?.[1];
        if (sel && val) add(`  await page.fill(${sel}, ${val});`);
        continue;
      }
      if (/(URL|Ï£ºÏÜå).*Ìè¨Ìï®/.test(l)) {
        const m = l.match(/["‚Äú‚Äù'']([^"‚Äù']+)["‚Äù'']/);
        if (m) add(`  await expect(page).toHaveURL(new RegExp(${JSON.stringify(m[1])}));`);
        continue;
      }
      if (/Ïä§ÌÅ¨Î¶∞ÏÉ∑|Ï∫°Ï≤ò/.test(l)) {
        add(`  await page.screenshot({ path: 'screenshot-${Date.now()}.png', fullPage: true });`);
        continue;
      }
      if (/Î∑∞Ìè¨Ìä∏|Ìï¥ÏÉÅÎèÑ/.test(l) && /(ÏÑ§Ï†ï|Î≥ÄÍ≤Ω)/.test(l)) {
        const w = Number(l.match(/(\d{3,4})\s*[xX*√ó]\s*(\d{3,4})/)?.[1] || '');
        const h = Number(l.match(/(\d{3,4})\s*[xX*√ó]\s*(\d{3,4})/)?.[2] || '');
        if (w && h) add(`  await page.setViewportSize({ width: ${w}, height: ${h} });`);
        continue;
      }
      // Í∏∞Î≥∏ Î°úÍ∑∏Î°ú Ìè¥Î∞±
      add(`  console.log('NL step: ${l.replace(/'/g, "\\'")}');`);
    }

    const header = `const { test, expect } = require('@playwright/test');

test('ÏûêÏó∞Ïñ¥ Í∏∞Î∞ò ÏãúÎÇòÎ¶¨Ïò§', async ({ page }) => {
`;
    const footer = `\n  console.log('‚úÖ ÏûêÏó∞Ïñ¥ ÏãúÎÇòÎ¶¨Ïò§ Ïã§Ìñâ ÏôÑÎ£å');
});`;
    return `${header}${body.join('\n')}\n${footer}`;
  };

  const executeTestScenario = async () => {
    if (!scenarioCode.trim()) {
      if (naturalScenario.trim()) {
        const generated = generateCodeFromNaturalLanguage(naturalScenario);
        setScenarioCode(generated);
      } else {
        setError('ÌÖåÏä§Ìä∏ ÏãúÎÇòÎ¶¨Ïò§ ÏΩîÎìúÎ•º ÏûÖÎ†•ÌïòÍ±∞ÎÇò ÏûêÏó∞Ïñ¥ ÏãúÎÇòÎ¶¨Ïò§Î•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }
    }

    try {
      setExecutionStatus('pending');
      setError(null);
      setLogs([]);
      setProgressPercentage(0);
      setCurrentStep('ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ÄÎπÑ Ï§ë...');

      const response = await fetch('/api/playwright/execute', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          scenarioCode,
          config
        }),
      });

      if (!response.ok) {
        throw new Error(`ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ïã§Ìå®: ${response.statusText}`);
      }

      const result = await response.json();
      setExecutionId(result.executionId);
      setCurrentStep('ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë...');
      
      // Ïã§Ìñâ Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë
      startExecutionMonitoring(result.executionId);
      
    } catch (err) {
      setExecutionStatus('failed');
      setError(err instanceof Error ? err.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      setCurrentStep('ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ïã§Ìå®');
    }
  };

  const startExecutionMonitoring = (executionId: string) => {
    const interval = setInterval(async () => {
      try {
        const response = await fetch(`/api/playwright/status/${executionId}`);
        if (!response.ok) {
          throw new Error('ÏÉÅÌÉú Ï°∞Ìöå Ïã§Ìå®');
        }

        const statusData = await response.json();
        setExecutionStatus(statusData.status);
        setProgressPercentage(statusData.progressPercentage || 0);
        setCurrentStep(statusData.currentStep || '');
        
        if (statusData.logs && statusData.logs.length > 0) {
          setLogs(statusData.logs);
        }

        if (statusData.status === 'completed' || statusData.status === 'failed') {
          clearInterval(interval);
          if (statusData.status === 'completed') {
            getFinalResult(executionId);
          }
        }
      } catch (err) {
        console.error('Î™®ÎãàÌÑ∞ÎßÅ Ïò§Î•ò:', err);
        clearInterval(interval);
      }
    }, 1000);
  };

  const getFinalResult = async (executionId: string) => {
    try {
      const response = await fetch(`/api/playwright/results/${executionId}`);
      if (response.ok) {
        const result = await response.json();
        setLogs(prev => [...prev, `üéØ ÏµúÏ¢Ö Í≤∞Í≥º: ${result.resultSummary}`]);
        if (result.errorDetails) {
          setError(result.errorDetails);
        }
      }
    } catch (err) {
      console.error('ÏµúÏ¢Ö Í≤∞Í≥º Ï°∞Ìöå Ïã§Ìå®:', err);
    }
  };

  const validateScenario = async () => {
    try {
      const response = await fetch('/api/playwright/validate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ scenarioCode }),
      });

      const result = await response.json();
      if (result.valid) {
        setError(null);
        setLogs(prev => [...prev, '‚úÖ ÏãúÎÇòÎ¶¨Ïò§ ÏΩîÎìú Í≤ÄÏ¶ù ÏôÑÎ£å']);
      } else {
        setError(`Í≤ÄÏ¶ù Ïã§Ìå®: ${result.message}`);
      }
    } catch (err) {
      setError('Í≤ÄÏ¶ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const getStatusIcon = () => {
    switch (executionStatus) {
      case 'idle': return <Play className="h-4 w-4" />;
      case 'pending': return <Clock className="h-4 w-4" />;
      case 'running': return <Zap className="h-4 w-4" />;
      case 'completed': return <CheckCircle className="h-4 w-4" />;
      case 'failed': return <XCircle className="h-4 w-4" />;
      default: return <Play className="h-4 w-4" />;
    }
  };

  const getStatusText = () => {
    switch (executionStatus) {
      case 'idle': return 'ÌÖåÏä§Ìä∏ Ïã§Ìñâ';
      case 'pending': return 'Ïã§Ìñâ ÎåÄÍ∏∞ Ï§ë...';
      case 'running': return 'Ïã§Ìñâ Ï§ë...';
      case 'completed': return 'ÏôÑÎ£åÎê®';
      case 'failed': return 'Ïã§Ìå®Ìï®';
      default: return 'ÌÖåÏä§Ìä∏ Ïã§Ìñâ';
    }
  };

  const getButtonVariant = () => {
    switch (executionStatus) {
      case 'idle': return 'default';
      case 'pending':
      case 'running': return 'secondary';
      case 'completed': return 'outline';
      case 'failed': return 'destructive';
      default: return 'default';
    }
  };

  return (
    <div className="space-y-6">
      {/* ÏãúÎÇòÎ¶¨Ïò§ ÏûëÏÑ± Í∞ÄÏù¥Îìú */}
      <div className="neu-subtle rounded-xl px-6 py-6">
        <div className="flex items-center space-x-3 mb-4">
          <BookOpen className="h-5 w-5 text-primary" />
          <Label className="text-foreground font-semibold text-lg">Playwright ÏãúÎÇòÎ¶¨Ïò§ ÏûëÏÑ± Í∞ÄÏù¥Îìú</Label>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div className="neu-pressed rounded-lg p-4">
            <div className="flex items-center space-x-2 mb-2">
              <Code className="h-4 w-4 text-primary" />
              <span className="font-semibold text-sm">Í∏∞Î≥∏ Íµ¨Ï°∞</span>
            </div>
            <p className="text-xs text-muted-foreground">
              test() Ìï®ÏàòÎ°ú ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§Î•º Ï†ïÏùòÌïòÍ≥†, page Í∞ùÏ≤¥Î°ú Î∏åÎùºÏö∞Ï†ÄÎ•º Ï†úÏñ¥Ìï©ÎãàÎã§.
            </p>
          </div>
          
          <div className="neu-pressed rounded-lg p-4">
            <div className="flex items-center space-x-2 mb-2">
              <Monitor className="h-4 w-4 text-primary" />
              <span className="font-semibold text-sm">ÌéòÏù¥ÏßÄ Ï°∞Ïûë</span>
            </div>
            <p className="text-xs text-muted-foreground">
              goto(), click(), fill(), type() Îì±ÏúºÎ°ú Ïã§Ï†ú ÏÇ¨Ïö©Ïûê ÌñâÎèôÏùÑ ÏãúÎÆ¨Î†àÏù¥ÏÖòÌï©ÎãàÎã§.
            </p>
          </div>
          
          <div className="neu-pressed rounded-lg p-4">
            <div className="flex items-center space-x-2 mb-2">
              <Bug className="h-4 w-4 text-primary" />
              <span className="font-semibold text-sm">Í≤ÄÏ¶ù</span>
            </div>
            <p className="text-xs text-muted-foreground">
              expect() Ìï®ÏàòÎ°ú ÏöîÏÜå Ï°¥Ïû¨, ÌÖçÏä§Ìä∏ ÎÇ¥Ïö©, ÌéòÏù¥ÏßÄ Ï†úÎ™© Îì±ÏùÑ Í≤ÄÏ¶ùÌï©ÎãàÎã§.
            </p>
          </div>
        </div>

        <div className="space-y-3">
          <div className="flex items-start space-x-2">
            <AlertCircle className="h-4 w-4 text-primary flex-shrink-0 mt-0.5" />
            <div className="text-sm text-muted-foreground">
              <strong>Ï§ëÏöî:</strong> ÏãúÎÇòÎ¶¨Ïò§ ÏΩîÎìúÎäî Node.js ÌôòÍ≤ΩÏóêÏÑú Ïã§ÌñâÎêòÎØÄÎ°ú, require() Íµ¨Î¨∏ÏùÑ ÏÇ¨Ïö©ÌïòÍ±∞ÎÇò ES6 Î™®Îìà ÌòïÏãùÏúºÎ°ú ÏûëÏÑ±Ìï¥Ïïº Ìï©ÎãàÎã§.
            </div>
          </div>
          
          <div className="flex items-start space-x-2">
            <FileText className="h-4 w-4 text-primary flex-shrink-0 mt-0.5" />
            <div className="text-sm text-muted-foreground">
              <strong>ÌåÅ:</strong> console.log()Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÌÖåÏä§Ìä∏ ÏßÑÌñâ ÏÉÅÌô©ÏùÑ Î°úÍ∑∏Î°ú Ï∂úÎ†•Ìï† Ïàò ÏûàÏäµÎãàÎã§. Ïù¥ Î°úÍ∑∏Îì§ÏùÄ ÌÖåÏä§Ìä∏ Í≤∞Í≥ºÏóêÏÑú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.
            </div>
          </div>
        </div>
      </div>



      {/* ÏãúÎÇòÎ¶¨Ïò§ ÏûÖÎ†• - 2Í∞ú Ïª¨Îüº */}
      <div className="neu-subtle rounded-xl px-6 py-6">
        <Label className="text-foreground font-semibold text-lg mb-4 block">
          ÌÖåÏä§Ìä∏ ÏãúÎÇòÎ¶¨Ïò§ ÏûëÏÑ± <span className="text-xs text-muted-foreground ml-1">(Test Scenario Creation)</span>
        </Label>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* ÏûêÏó∞Ïñ¥ ÏãúÎÇòÎ¶¨Ïò§ ÏûÖÎ†• */}
          <div>
            <Label className="text-sm text-muted-foreground mb-2 block">
              ÏûêÏó∞Ïñ¥ ÏãúÎÇòÎ¶¨Ïò§ <span className="text-xs text-muted-foreground">(Natural Language)</span>
            </Label>
            <div className="neu-input rounded-xl px-4 py-3">
              <textarea
                value={naturalScenario}
                onChange={(e) => setNaturalScenario(e.target.value)}
                placeholder={`Ïòà)
1) https://example.com Ïóê Ï†ëÏÜçÌïúÎã§
2) ÌéòÏù¥ÏßÄ Ï†úÎ™©Ïóê "Example Domain" Ïù¥ Ìè¨Ìï®ÎêòÏñ¥Ïïº ÌïúÎã§
3) "Î°úÍ∑∏Ïù∏" Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïúÎã§
4) Ïä§ÌÅ¨Î¶∞ÏÉ∑ÏùÑ Ï∞çÎäîÎã§`}
                className="min-h-80 border-none bg-transparent resize-none text-foreground placeholder:text-muted-foreground font-mono text-sm w-full leading-relaxed"
                spellCheck="false"
              />
            </div>
          </div>

          {/* ÏûêÎèô ÏÉùÏÑ±Îêú ÌÖåÏä§Ìä∏ ÏΩîÎìú */}
          <div>
            <Label className="text-sm text-muted-foreground mb-2 block">
              ÏÉùÏÑ± ÌÖåÏä§Ìä∏ ÏΩîÎìú <span className="text-xs text-muted-foreground">(Auto-generated Code)</span>
            </Label>
            <div className="neu-input rounded-xl px-4 py-3">
              <textarea
                value={scenarioCode}
                onChange={(e) => setScenarioCode(e.target.value)}
                placeholder="ÏûêÏó∞Ïñ¥ ÏãúÎÇòÎ¶¨Ïò§Î•º ÏûÖÎ†•ÌïòÎ©¥ ÏûêÎèôÏúºÎ°ú ÌÖåÏä§Ìä∏ ÏΩîÎìúÍ∞Ä ÏÉùÏÑ±Îê©ÎãàÎã§..."
                className="min-h-80 border-none bg-transparent resize-none text-foreground placeholder:text-muted-foreground font-mono text-sm w-full leading-relaxed"
                spellCheck="false"
              />
            </div>
          </div>
        </div>

        <div className="flex gap-3 mt-4">
          <Button
            onClick={validateScenario}
            variant="outline"
            size="sm"
            className="flex items-center space-x-2"
          >
            <CheckCircle className="h-4 w-4" />
            <span>ÏΩîÎìú Í≤ÄÏ¶ù</span>
          </Button>
          
          <Button
            onClick={() => {
              const generated = generateCodeFromNaturalLanguage(naturalScenario);
              setScenarioCode(generated);
            }}
            variant="secondary"
            className="flex items-center space-x-2"
            disabled={!naturalScenario.trim()}
          >
            <Code className="h-4 w-4" />
            <span>ÏàòÎèô Î≥ÄÌôò</span>
          </Button>
          
          <Button
            onClick={executeTestScenario}
            disabled={executionStatus === 'pending' || executionStatus === 'running'}
            variant={getButtonVariant()}
            className="flex items-center space-x-2"
          >
            {getStatusIcon()}
            <span>{getStatusText()}</span>
          </Button>
        </div>
      </div>

      {/* Ïã§Ìñâ ÏÉÅÌÉú Î∞è Í≤∞Í≥º */}
      {executionId && (
        <div className="neu-subtle rounded-xl px-6 py-6">
          <Label className="text-foreground font-semibold text-lg mb-4 block">
            ÌÖåÏä§Ìä∏ Ïã§Ìñâ ÏÉÅÌÉú <span className="text-xs text-muted-foreground ml-1">(Test Execution Status)</span>
          </Label>
          
          <div className="space-y-4">
            {/* Ïã§Ìñâ ID */}
            <div className="neu-pressed rounded-lg px-4 py-3">
              <div className="flex items-center space-x-2">
                <FileText className="h-4 w-4 text-primary" />
                <span className="text-sm text-muted-foreground">Ïã§Ìñâ ID:</span>
                <span className="font-mono text-sm text-foreground">{executionId}</span>
              </div>
            </div>

            {/* ÏßÑÌñâÎ•† */}
            {executionStatus === 'running' && (
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">ÏßÑÌñâÎ•†</span>
                  <span className="text-foreground">{progressPercentage}%</span>
                </div>
                <div className="w-full bg-muted rounded-full h-2">
                  <div 
                    className="bg-primary h-2 rounded-full transition-all duration-300"
                    style={{ width: `${progressPercentage}%` }}
                  />
                </div>
              </div>
            )}

            {/* ÌòÑÏû¨ Îã®Í≥Ñ */}
            {currentStep && (
              <div className="neu-pressed rounded-lg px-4 py-3">
                <div className="flex items-center space-x-2">
                  <Clock className="h-4 w-4 text-primary" />
                  <span className="text-sm text-muted-foreground">ÌòÑÏû¨ Îã®Í≥Ñ:</span>
                  <span className="text-sm text-foreground">{currentStep}</span>
                </div>
              </div>
            )}

            {/* Ïò§Î•ò Î©îÏãúÏßÄ */}
            {error && (
              <div className="neu-pressed rounded-lg px-4 py-3 border-l-4 border-destructive">
                <div className="flex items-start space-x-2">
                  <XCircle className="h-4 w-4 text-destructive flex-shrink-0 mt-0.5" />
                  <div className="text-sm text-destructive">
                    <strong>Ïò§Î•ò:</strong> {error}
                  </div>
                </div>
              </div>
            )}

            {/* Ïã§Ìñâ Î°úÍ∑∏ */}
            {logs.length > 0 && (
              <div className="space-y-2">
                <Label className="text-sm text-muted-foreground">Ïã§Ìñâ Î°úÍ∑∏</Label>
                <div className="neu-pressed rounded-lg px-4 py-3 max-h-48 overflow-y-auto">
                  <div className="space-y-1">
                    {logs.map((log, index) => (
                      <div key={index} className="text-xs font-mono text-foreground">
                        {log}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Ï∂îÍ∞Ä ÏòàÏ†ú Î∞è ÌåÅ */}
      {/* <div className="neu-subtle rounded-xl px-6 py-6">
        <Label className="text-foreground font-semibold text-lg mb-4 block">
          Ïú†Ïö©Ìïú ÏãúÎÇòÎ¶¨Ïò§ ÏòàÏ†ú <span className="text-xs text-muted-foreground ml-1">(Useful Examples)</span>
        </Label>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="neu-pressed rounded-lg p-4">
            <h4 className="font-semibold text-sm mb-2">Ìèº ÏûÖÎ†• ÌÖåÏä§Ìä∏</h4>
            <pre className="text-xs text-muted-foreground overflow-x-auto">
{`// Î°úÍ∑∏Ïù∏ Ìèº ÌÖåÏä§Ìä∏
await page.goto('/login');
await page.fill('#email', 'user@example.com');
await page.fill('#password', 'password123');
await page.click('button[type="submit"]');
await expect(page).toHaveURL('/dashboard');`}
            </pre>
          </div>
          
          <div className="neu-pressed rounded-lg p-4">
            <h4 className="font-semibold text-sm mb-2">API ÏùëÎãµ ÎåÄÍ∏∞</h4>
            <pre className="text-xs text-muted-foreground overflow-x-auto">
{`// API ÏùëÎãµ ÎåÄÍ∏∞ ÌõÑ Í≤ÄÏ¶ù
await page.click('#load-data');
await page.waitForResponse(response => 
  response.url().includes('/api/data')
);
await expect(page.locator('.data-item')).toHaveCount(5);`}
            </pre>
          </div>
          
          <div className="neu-pressed rounded-lg p-4">
            <h4 className="font-semibold text-sm mb-2">ÏÇ¨Ïö©Ïûê ÏÉÅÌò∏ÏûëÏö©</h4>
            <pre className="text-xs text-muted-foreground overflow-x-auto">
{`// ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ ÌÖåÏä§Ìä∏
await page.goto('/kanban');
const source = page.locator('.task-item').first();
const target = page.locator('.column').nth(1);
await source.dragTo(target);
await expect(target.locator('.task-item')).toHaveCount(1);`}
            </pre>
          </div>
          
          <div className="neu-pressed rounded-lg p-4">
            <h4 className="font-semibold text-sm mb-2">Î∞òÏùëÌòï ÌÖåÏä§Ìä∏</h4>
            <pre className="text-xs text-muted-foreground overflow-x-auto">
{`// Î™®Î∞îÏùº Î∑∞Ìè¨Ìä∏Î°ú ÌÖåÏä§Ìä∏
await page.setViewportSize({ width: 375, height: 667 });
await page.goto('/');
await expect(page.locator('.mobile-menu')).toBeVisible();
await page.click('.mobile-menu-toggle');`}
            </pre>
          </div>
        </div>
      </div> */}
    </div>
  );
}
